#
#	@(#)Makefile (testing binary for bchanf)
#		GNU make 用
#
#	make の方法
#	・make
#		リリース用の正式版を作成
#	・make mode=debug
#		デバッグ用に作成
#	・make clean
#		make で作成した全てのファイルを削除
#	・make install
#		規定の場所にインストール (実機用のみ)
#

# バージョン
version = 0x0010

# リリース用をデフォルトにする
mode =

# ソースの依存関係ファイル (自動生成)
DEPS = Dependencies
DEPENDENCIES_OUTPUT := $(DEPS)

# アプリケーション標準ルール
include ../../etc/makerules

#----------------------------------------------------------------------
# 作成対象
TARGET = bchanf_test

# ソースファイルのサーチパス
S = ../src ../src/unittest ../src/http ../src/parse ../src/coll ../src/coding ../src/tad ../src/css ../src/control
VPATH = $(S)

# ヘッダファイルのディレクトリ追加
HEADER := $(S) $(HEADER)

# ソースファイル
SRC_UNITTEST =	unittest_driver.c

SRC_HTTP = 	http_connector.c \
		http_transferdecoder.c \
		http_contentdecoder.c \
		http_headerlexer.c \
		http_statuslineparser.c \
		http_requestlinestream.c \
		http_defaultheaderstream.c \
		http_defaultheaderparser.c \
		http_transport.c

SRC_HTTP_TEST =	test_http_transferdecoder.c \
		test_http_contentdecoder.c \
		test_http_headerlexer.c \
		test_http_statuslineparser.c \
		test_http_requestlinestream.c \
		test_http_defaultheaderstream.c \
		test_http_defaultheaderparser.c

SRC_PARSE =	tokenchecker.c \
		charreferparser.c 

SRC_PARSE_TEST =	test_tokenchecker.c \
			test_charreferparser.c

SRC_COLL =	idtocb.c \
		arraybase.c \
		treebase.c \
		bytearray.c \
		wordarray.c

SRC_COLL_TEST =	test_idtocb.c \
		test_arraybase.c \
		test_treebase.c \
		test_bytearray.c \
		test_wordarray.c

SRC_CODING = 	base64encoder.c \
		base64decoder.c

SRC_CODING_TEST =	test_base64encoder.c \
			test_base64decoder.c

SRC_TAD =	taditerator.c \
		tadstack.c \
		tadtsvparser.c \
		tadlexer_le.c \
		traydata_iterator.c \
		tadfragment.c \
		tadlangcode.c

SRC_TAD_TEST = 	test_taditerator.c \
		test_tadstack.c \
		test_tadtsvparser.c \
		test_tadlexer_le.c \
		test_traydata_iterator.c \
		test_tadfragment.c \
		test_tadlangcode.c

SRC_CSS =	cssrendering_box.c \
		cssrendering_coordinate.c

SRC_CSS_TEST =	test_cssrendering_box.c \
		test_cssrendering_coordinate.c

SRC_CONTROL =	texteditor_textfragment.c \
	    	texteditor_characterstate.c \
		texteditor_insertfilter.c

SRC_CONTROL_TEST =	test_texteditor_textfragment.c \
		 	test_texteditor_characterstate.c \
			test_texteditor_insertfilter.c

SRC =	test_main.c $(SRC_UNITTEST) $(SRC_HTTP) $(SRC_HTTP_TEST) $(SRC_PARSE) $(SRC_PARSE_TEST) $(SRC_COLL) $(SRC_COLL_TEST) $(SRC_CODING) $(SRC_CODING_TEST) $(SRC_TAD) $(SRC_TAD_TEST) $(SRC_CSS) $(SRC_CSS_TEST) $(SRC_CONTROL) $(SRC_CONTROL_TEST)

# データボックスソースファイル
DBSRC =

SRC += $(DBSRC)

WC_SRC = $(filter %.C, $(SRC))

# オブジェクトファイル
OBJ = $(addsuffix .o, $(basename $(SRC)))

# コンパイルオプション
ifneq ($(mode), debug)
  CFLAGS += -Wall
endif

CFLAGS += $(BUILDOPTIONS) -DBCHAN_CONFIG_DEBUG

LOADLIBES += -limg

#----------------------------------------------------------------------
.PHONY: all clean install

INST = $(addprefix $(TARGET), .map)
NOINST = $(addprefix $(TARGET), .out)

all: $(INST)

$(TARGET).out: $(OBJ)
	$(LINK.o) $(LDOBJS) $^ $(LOADLIBES) $(LDLIBS) $(OUTPUT_OPTION)

clean:
	$(RM) $(OBJ)
	$(RM) $(WC_SRC:%.C=%.c) $(DBSRC)
	$(RM) $(INST) $(NOINST) *.lst $(DEPS)

install: $(INST:%=$(EXE_INSTALLDIR)/%)

$(EXE_INSTALLDIR)/$(TARGET).out: $(EXE_INSTALLDIR)/%: %
	$(EXE_INSTALL_STRIP)

# ソースの依存関係

$(WC_SRC:%.C=%.c):

$(DBSRC):

ifdef DEPENDENCIES_OUTPUT
$(DEPS):	; touch $(DEPS)
else
$(DEPS): $(SRC)	; $(MAKEDEPS) $@ $?
endif

include $(DEPS)
